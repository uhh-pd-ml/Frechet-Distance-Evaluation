# Frechet Inception Distance calculated for the BIB-AE generated data set, summarizing the z-axis
# In[1]:


from __future__ import print_function
import argparse
import os
import random

import torch
import torch.nn as nn
import torch.nn.parallel
from torch.nn.functional import adaptive_avg_pool2d
import torch.backends.cudnn as cudnn
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
import torch.nn.functional as F
import torchvision.models as models

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib as mpl

from IPython.display import HTML

from scipy import linalg

import matplotlib.pyplot as plt
import sys

import pandas as pd
import h5py

import glob

import calorimeter_functions as cf
import torch.nn.functional as F


# In[2]:


SEED=42
random.seed(SEED)
torch.manual_seed(SEED)
# Batch size during training
batch_size = 200
# Spatial size of training images. All images will be resized to this size using a transformer.
image_size = 64
# Number of channels in the training images. For color images this is 3
nc = 3
# Size of z latent vector (i.e. size of generator input)
#nz = 100
# Size of feature maps in generator
#ngf = 64
# Size of feature maps in discriminator
#ndf = 64
# Number of training epochs
num_epochs = 10
# different Learning rate for optimizers
#g_lr = 0.0001
#d_lr = 0.0004
# Beta1 hyperparam for Adam optimizers
#beta1 = 0.5
#ngpu=1


# In[3]:


fid_list = []
fid_list_PP = []


# In[4]:


# Import Real Data
data_real = h5py.File('/beegfs/desy/user/werthern/CalorimeterData/for_Nana/Epoch_x_Real.h5')
real_img = cf.resizeRealImages(data_real)
print(real_img.shape)


# In[5]:


# Import Real Energy
real_energy = cf.resizeRealEnergy(data_real)
print(real_energy.shape)


# In[6]:


#print(time.strftime("%H:%M:%S"))

for i in range (1,35):
    weights = '/beegfs/desy/user/diefenbs/VAE_results/2020_KW13/3D_M_BiBAESmLVar_P_None_C_ConvDiffv3_CL_Default_KLD005_MDL__L24_512_1MCor/check_3D_M_BiBAESmLVar_P_None_C_ConvDiffv3_CL_Default_KLD005_MDL__L24_512_1MCor_{}.pth'.format(i)
    
    directory = '/beegfs/desy/user/werthern/CalorimeterData/for_Nana/allData'
    f_name = 'Epoch_{}_Fake.h5'.format(i)
    use_PP = False
    
    numEvents = 49800 # 85000 max
    fake_images = cf.generateData(weights,directory,f_name,numEvents,real_energy,use_PP)
    print(fake_images.shape)
    
    fake_img = cf.resizeFakeImages(fake_images)
    print(fake_img.shape)
    
    fid_value = cf.calculateFrechet(real_img, fake_img, batch_size)
    print(fid_value)
    fid_list.append(fid_value)
    
#print(time.strftime("%H:%M:%S"))


# In[ ]:


print(time.strftime("%H:%M:%S"))

for i in range (36,50):
    weights = '/beegfs/desy/user/diefenbs/VAE_results/2020_KW13/3D_M_BiBAESmLVar_P_1ConvEconV2_C_ConvDiffv3_CL_Default_KLD005_MDL_PMDKS_L24_512_1MCor/check_3D_M_BiBAESmLVar_P_1ConvEconV2_C_ConvDiffv3_CL_Default_KLD005_MDL_PMDKS_L24_512_1MCor_{}.pth'.format(i)
    
    directory = '/beegfs/desy/user/werthern/CalorimeterData/for_Nana/allData'
    f_name = 'Epoch_{}_Fake.h5'.format(i)
    use_PP = true
    
    numEvents = 49800 # 85000 max
    fake_images = cf.generateData(weights,directory,f_name,numEvents,real_energy,use_PP)
    print(fake_images.shape)
    
    fake_img = cf.resizeFakeImages(fake_images)
    print(fake_img.shape)
    
    fid_value = cf.calculateFrechet(real_img, fake_img, batch_size)
    print(fid_value)
    fid_list_PP.append(fid_value)

print(time.strftime("%H:%M:%S"))


# In[ ]:


print(fid_list)


# In[7]:


fid_list = [3.246509076841277874e+01,2.828174015237448202e+01,2.871226012577540132e+01,2.450685907580134426e+01,2.287897127224118776e+01,2.074687033553823312e+01,2.570478552182134990e+01,2.120406137109614519e+01,1.884084314194001308e+01,2.128075377655318334e+01,2.010725619683523746e+01,2.107395152559342932e+01,2.175303729240783923e+01,1.894183921488115629e+01,2.129882467835523130e+01,2.044333230314964567e+01,2.108353665088327489e+01,2.006930493953552741e+01,1.967502136484540642e+01,1.964423831180693014e+01,1.920946845708476758e+01,1.859943205640843189e+01,2.060466400812219945e+01,1.859849934832777762e+01,1.898016003297573207e+01,1.859217137794803421e+01,1.870846707834959943e+01,1.801623691825398055e+01,1.787958642794751540e+01,1.756002574875117261e+01,1.762213333725446773e+01,1.907061960889700458e+01,1.759630417452342499e+01,1.903525393870359039e+01,1.864952021985311603e+01]
fid_list_PP =[1.894140126898400922e+01,1.862754907582859687e+01,1.940685465279500477e+01,1.836785094913443572e+01,1.837488483097979497e+01,1.941414405775196883e+01,1.790131160984822145e+01,1.851242962652668211e+01,1.974496402626152758e+01,1.905264921137461442e+01,1.994455457259596187e+01,1.815174840441329707e+01]

print(len(fid_list_PP))


# In[11]:


a = []
for i in range (1,36):
    a.append(i)
b = []
for i in range (36,48):
    b.append(i)
    

plt.figure(figsize=(8,6), dpi=100, facecolor='none')
plt.plot(a, fid_list, label="without Post Processing", color='darkblue')
plt.plot(b, fid_list_PP, label="with Post Processing", color='lightblue')
plt.legend(loc='upper right', fontsize=10, edgecolor='none')
plt.title(" FID Calorimeter Data \n",fontsize=15)
plt.xlabel('Epoch')
plt.ylabel('Frechet Inception Distance')
plt.show()

